// @generated by protoc-gen-connect-es v1.4.0 with parameter "target=ts"
// @generated from file lage/v1/lage.proto (package connectrpc.lage.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { PingRequest, PingResponse, RunTargetRequest, RunTargetResponse } from "./lage_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 * @generated from service connectrpc.lage.v1.LageService
 */
export const LageService: {
  readonly typeName: "connectrpc.lage.v1.LageService";
  readonly methods: {
    /**
     * @generated from rpc connectrpc.lage.v1.LageService.RunTarget
     */
    readonly runTarget: {
      readonly name: "RunTarget";
      readonly I: typeof RunTargetRequest;
      readonly O: typeof RunTargetResponse;
      readonly kind: MethodKind.Unary;
    };
    /**
     * a ping function to check if the server is up
     *
     * @generated from rpc connectrpc.lage.v1.LageService.Ping
     */
    readonly ping: {
      readonly name: "Ping";
      readonly I: typeof PingRequest;
      readonly O: typeof PingResponse;
      readonly kind: MethodKind.Unary;
    };
  };
} = {
  typeName: "connectrpc.lage.v1.LageService",
  methods: {
    /**
     * @generated from rpc connectrpc.lage.v1.LageService.RunTarget
     */
    runTarget: {
      name: "RunTarget",
      I: RunTargetRequest,
      O: RunTargetResponse,
      kind: MethodKind.Unary,
    },
    /**
     * a ping function to check if the server is up
     *
     * @generated from rpc connectrpc.lage.v1.LageService.Ping
     */
    ping: {
      name: "Ping",
      I: PingRequest,
      O: PingResponse,
      kind: MethodKind.Unary,
    },
  },
} as const;

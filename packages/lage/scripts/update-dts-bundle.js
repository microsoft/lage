//
// See the comment in ../dts-bundle.config.js for why this is needed.
//

// @ts-check
const fs = require("fs");
const { builtinModules } = require("module");
const path = require("path");
const { findGitRoot } = require("workspace-tools");

const gitRoot = findGitRoot(process.cwd());
const relativeFilename = path.relative(gitRoot, __filename);

/** @type {Record<string, { path: string; rewriteImports?: string[] }>} */
const bundles = {
  lage: {
    path: path.resolve(__dirname, "../dist/index.d.ts"),
    // These packages are bundled in sibling dts files, so imports should be rewritten to point there
    rewriteImports: ["backfill-config"],
  },
  "backfill-config": {
    path: path.resolve(__dirname, "../dist/backfill-config.d.ts"),
  },
};

let hasError = false;

// Scan through the imports to validate they're only referencing builtins or other bundled packages,
// and rewrite any package imports to point to the local bundle file
for (const [name, { path: bundlePath, rewriteImports }] of Object.entries(bundles)) {
  const content = fs.readFileSync(bundlePath, "utf8");
  let newContent = content;
  let unexpectedImports = /** @type {string[]} */ ([]);

  for (const [fullMatch, importName] of content.matchAll(/from ['"](.*?)['"]/g)) {
    if (rewriteImports?.includes(importName)) {
      newContent = newContent.replace(fullMatch, `from './${importName}.js'`);
    } else if (!builtinModules.includes(importName)) {
      unexpectedImports.push(importName);
    }
  }

  if (unexpectedImports.length) {
    hasError = true;
    console.error(`
Found unexpected new import(s) in the bundled types for "${name}":
${unexpectedImports.map((i) => `  ${i}`).join("\n")}
You may need to add the package(s) to the "inlinedLibraries" list for "${name}" in dts-bundle.config.js.
`);
  }

  newContent = `
// Bundle of types from "${name}" and packages it references.
// This file was generated by dts-bundle-generator and ${relativeFilename}

${newContent}`;
  {
    fs.writeFileSync(bundlePath, newContent);
    console.log(`Updated imports in "${name}" dts bundle at ${bundlePath}`);
  }
}

if (hasError) {
  process.exit(1);
}

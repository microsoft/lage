diff --git a/build/index.d.mts b/build/index.d.mts
index 42f2f85be8a5fc095c6ef966f48bbaf48d08fa93..167dae9b63df831d1b7564a73905fd6dd9037947 100644
--- a/build/index.d.mts
+++ b/build/index.d.mts
@@ -5,7 +5,19 @@
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  */
-/// <reference lib="ESNext.Disposable" preserve="true" />
+
+// patching for TS 5.0 since lib="ESNext.Disposable" doesn't exist yet
+// (can be removed when typescript is updated to >= 5.2)
+declare global {
+  interface SymbolConstructor {
+      readonly dispose: unique symbol;
+      readonly asyncDispose: unique symbol;
+  }
+  interface Disposable {
+      [Symbol.dispose](): void;
+  }
+}
+
 type MockMetadataType = 'object' | 'array' | 'regexp' | 'function' | 'constant' | 'collection' | 'null' | 'undefined';
 type MockMetadata<T, MetadataType = MockMetadataType> = {
   ref?: number;
diff --git a/build/index.d.ts b/build/index.d.ts
index 206eb393627cc1266afe963c874cc8094e813ee1..ece751ef031b206e75e1906355cb180cacb4e73b 100644
--- a/build/index.d.ts
+++ b/build/index.d.ts
@@ -5,7 +5,17 @@
  * LICENSE file in the root directory of this source tree.
  */
 
-/// <reference lib="ESNext.Disposable" />
+// patching for TS 5.0 since lib="ESNext.Disposable" doesn't exist yet
+// (can be removed when typescript is updated to >= 5.2)
+declare global {
+  interface SymbolConstructor {
+      readonly dispose: unique symbol;
+      readonly asyncDispose: unique symbol;
+  }
+  interface Disposable {
+      [Symbol.dispose](): void;
+  }
+}
 
 export declare type ClassLike = new (...args: any) => any;
 
